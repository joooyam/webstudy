/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-03-29 06:10:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');


//250314 login - login_ok

request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');
      com.yong.member.MemberDAO mdao = null;
      mdao = (com.yong.member.MemberDAO) _jspx_page_context.getAttribute("mdao", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (mdao == null){
        mdao = new com.yong.member.MemberDAO();
        _jspx_page_context.setAttribute("mdao", mdao, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');

String userid = request.getParameter("userid");
String userpwd = request.getParameter("userpwd");
String saveid=request.getParameter("saveid"); //아이디 기억 아이디 어디에 저장해야 서버의 자원 아끼는 밥 = 쿠키 (db에 하면 사용자서비스 제공해주려다가 자원낭비하게됨)
//아이디 기억은 = 보안성 낮고 정보도 낮음
//어느 시점에 만드는게 중요함 체크하고 로그인 _ok에서 만들지 검증하고나서 쿠키 만들지 고민해보기
//login_ok수행하고나서 쿠키를 만드는데 편하게 사용하는 거니가 체크박스를 사용하기 위한 파일을 만들고 아이디 틀리면 뭐해야되는거지
//로그인이 검증된 이후 사용자가 맞다라고 한 ㅇ이후에 쿠키 생성해줘야함 111. 아이디기억

int result = mdao.loginCheck(userid, userpwd);

if (result==mdao.LOGIN_OK) {
   //로그인 ok일 때 수행되어야함 //사 용자 id 가져와야함
   String username=mdao.getUserInfo(userid);
   session.setAttribute("sid", userid); //아이디는 사용자의 요구사항에 따라 아이디가 저장해야될지 결정
   session.setAttribute("sname", username);
   
   //아이디 기억 순서 2 null이 아닐 때만 쿠키 생성해주기  
   if(saveid!=null){
	  Cookie ck=new Cookie("saveid",userid);
	  ck.setMaxAge(60*60*24*30);
	  //레스폰스로 아이디 저장
	  response.addCookie(ck);//사용자가 아이디 사용하고 싶지 않아서 쿠키 지우는 것도 필요함
	 
	  //쿠키 지우는 방법 = 수명을 0으로 셋팅해두면 지운다는게 아니라 가자마자 지우는 것이므로 살자마자 죽으므로 삭제를 의미하므로
	  //해당 나이 0으로 셋팅하는법
   }else{
	   Cookie ck=new Cookie("saveid",userid);
		  ck.setMaxAge(0); //만들자마자 삭제
		  response.addCookie(ck);
   }//4.쿠키 정보활용 로그인 창으로 가기 head body사이에서 사용자 아이디값가져올거임
   
      out.write("\r\n");
      out.write("     <script>\r\n");
      out.write("     window.alert('");
      out.print(username);
      out.write("님 환영합니다~');\r\n");
      out.write("     //나를 가르키는 키워드 opener를 이용해 reload를 가리키면 f5누를 거와 동일해짐\r\n");
      out.write("     opener.location.reload();\r\n");
      out.write("     window.self.close();\r\n");
      out.write("     </script> \r\n");
      out.write("   ");

} else if (result==mdao.NOT_ID||result==mdao.NOT_PWD) {
   
      out.write("\r\n");
      out.write("   <script>\r\n");
      out.write("   window.alert('ID 또는 비밀번호가 잘못되었습니다.')\r\n");
      out.write("   location.href=\"login.jsp\";\r\n");
      out.write("   </script>\r\n");
      out.write("   ");

} else if (result==mdao.ERROR) {
   out.println("고객센터 연락바람~");
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
